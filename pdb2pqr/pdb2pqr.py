#!/usr/bin/python2 -O

"""
    Driver for PDB2PQR

    This module takes a PDB file as input and performs optimizations
    before yielding a new PDB-style file as output.

    Ported to Python by Todd Dolinsky (todd@ccb.wustl.edu)
    Washington University in St. Louis

    Parsing utilities provided by Nathan A. Baker (baker@biochem.wustl.edu)
    Washington University in St. Louis
"""

__date__ = "25 May 2005"
__author__ = "Todd Dolinsky, Nathan Baker"
__version__ = "1.0.0"

import string
import sys
import getopt
import os
import time
from src import pdb
from src import utilities
from src import structures
from src import routines
from src import protein
from src import server
from src.pdb import *
from src.utilities import *
from src.structures import *
from src.definitions import *
from src.forcefield import *
from src.routines import *
from src.protein import *
from src.server import *
from StringIO import *

def usage(rc):
    """
        Print usage for this script to stdout.

        Parameters
            rc:  Exit status (int)
    """

    str = "\n"
    str = str + "pdb2pqr  (Version %s)\n" % __version__
    str = str + "\n"
    str = str + "This module takes a PDB file as input and performs\n"
    str = str + "optimizations before yielding a new PDB-style file as\n"
    str = str + "output\n"
    str = str + "\n"
    str = str + "Usage: pdb2pqr.py [options] --ff=<forcefield> <path> <output-path>\n"
    str = str + "    Required Arguments:\n"
    str = str + "        <forcefield>  :  The forcefield to use - currently\n"
    str = str + "                         amber, charmm, and parse are supported.\n"
    str = str + "        <path>        :  The path to the PDB file or an ID\n"
    str = str + "                         to obtain from the PDB archive\n"
    str = str + "        <output-path> :  The desired output name of the PQR file\n"
    str = str + "                         to be generated\n"
    str = str + "    Optional Arguments:\n"
    str = str + "        --nodebump    :  Do not perform the debumping operation\n"
    str = str + "        --noopt       :  Do not perform hydrogen optimization\n"
    str = str + "        --hbond       :  Print a list of hydrogen bonds to stdout\n"
    str = str + "        --assign-only :  Only assign charges and radii, but no\n"
    str = str + "                         optimizations - effectively turns on the\n"
    str = str + "                         nodebump and noopt flags\n"
    str = str + "        --with-ph=<ph>:  Use propka to calculate pKas and apply them\n"
    str = str + "                         to the molecule given the pH value. Actual\n"
    str = str + "                         PropKa results will be output to \n"
    str = str + "                         <output-path>.propka.\n"
    str = str + "        --apbs-input  :  Create a template APBS input file based on\n"
    str = str + "                         the generated PQR file.\n"
    str = str + "        --verbose (-v):  Print information to stdout\n"
    str = str + "        --help    (-h):  Display the usage information\n"
    str = str + "\n"
    sys.stderr.write(str)
    sys.exit(rc)

def printHeader(atomlist, reslist, charge, ff, warnings, ph):
    """
        Print the header for the PQR file

        Parameters:
            atomlist: A list of atoms that were unable to have
                      charges assigned (list)
            reslist:  A list of residues with non-integral charges
                      (list)
            charge:   The total charge on the protein (float)
            ff:       The forcefield name (string)
            warnings: A list of warnings generated from routines (list)
            ph:       Value of ph, indicates propka used (float)
        Returns
            header:   The header for the PQR file (string)
    """
    header = "REMARK   1 PQR file generated by PDB2PQR (Version %s)\n" % __version__
    header = header + "REMARK   1\n"
    header = header + "REMARK   1 Forcefield Used: %s\n" % ff
    header = header + "REMARK   1\n"
    
    if ph != None:
        header = header + "REMARK   1 pKas calculated by propka and assigned using pH %.2f\n" % ph
        header = header + "REMARK   1\n"

    for warning in warnings:
        header = header + "REMARK   5 " + warning 
    header = header + "REMARK   5\n"
    
    if len(atomlist) != 0:
        header += "REMARK   5 WARNING: PDB2PQR was unable to assign charges\n"
        header += "REMARK   5          to the following atoms (omitted below):\n"
        for atom in atomlist:
            header += "REMARK   5              %i %s in %s %i\n" % \
                      (atom.get("serial"), atom.get("name"), \
                       atom.get("residue").get("name"), \
                       atom.get("residue").get("resSeq"))
        header += "REMARK   5\n"
    if len(reslist) != 0:
        header += "REMARK   5 WARNING: Non-integral net charges were found in\n"
        header += "REMARK   5          the following residues:\n"
        for residue in reslist:
            header += "REMARK   5              %s %i - Residue Charge: %.4f\n" % \
                      (residue.get("name"), residue.get("resSeq"), \
                       residue.getCharge())
        header += "REMARK   5\n"
    header += "REMARK   6 Total charge on this protein: %.4f e\n" % charge
    header += "REMARK   6\n"

    return header
  
def runPDB2PQR(pdblist, ff, options):
    """
        Run the PDB2PQR Suite

        Parameters
            pdblist: The list of objects that was read from the PDB file
                     given as input (list)
            ff:      The name of the forcefield (string)
            options: A dictionary of PDB2PQR options, including:
                     verbose: When 1, script will print information to stdout
                              When 0, no detailed information will be printed (int)
                     debump:  When 1, debump heavy atoms (int)
                     opt:     When 1, run hydrogen optimization (int)
                     ph:      The desired ph of the system (float)
                     outname: The name of the desired output file
        Returns
            header:  The PQR file header (string)
            lines:   The PQR file atoms (list)
    """
    ph = None
    pkaname = ""
    lines = []
    if "verbose" in options: verbose = 1
    else: verbose = 0

    if "opt" in options: optflag = 1
    else: optflag = 0

    if "outname" not in options or options["outname"] == None:
        text = "Error: Output name not set!"
        raise ValueError, text
    else:
        outname = options["outname"]

    if "ph" in options:
        pka = 1
        ph = options["ph"]
        period = string.find(outname,".")
        if period > 0:
            pkaname = outname[0:period] + ".propka"
        else:
            pkaname = outname + ".propka"
        if os.path.isfile(pkaname): os.remove(pkaname)
    else: pka = 0
    
    start = time.time()

    if verbose:
        print "Beginning PDB2PQR...\n"

    myProtein = Protein(pdblist)
    if verbose:
        print "Created protein object -"
        print "\tNumber of residues in protein: %s" % myProtein.numResidues()
        print "\tNumber of atoms in protein   : %s" % myProtein.numAtoms()

    myDefinition = Definition()
    if verbose:
        print "Parsed Amino Acid definition file."
        
    myRoutines = Routines(myProtein, verbose, myDefinition)              
    
    myRoutines.updateResidueTypes()
    myRoutines.updateSSbridges()
    myRoutines.updateExtraBonds()
    myRoutines.correctNames()

    # Don't do if AA not present
    
    myRoutines.findMissingHeavy()

    if "debump" in options:
        myRoutines.calculateChiangles()
        myRoutines.debumpProtein(optflag)  

    # Histidine protonation states depend on pka and optimization
    # HS2N is a holder for neutral HIS that will be optimized (i.e to-neutral)
    # HSN is holder for neutral HIS that will NOT be optimized
   
    if pka and optflag:
        myRoutines.runPROPKA(ph, ff, pkaname)
    elif pka and not optflag:
        myRoutines.runPROPKA(ph, ff, pkaname)
        myRoutines.renameHistidines("HS2N","HSN") # Set to HSD
    elif not pka and optflag:
        myRoutines.renameHistidines("HIS","HS2N") # Let optimization determine HSD/HSE
    elif not pka and not optflag:
        myRoutines.renameHistidines("HIS","HSN") # Set to HSD

    myRoutines.addHydrogens()

    if "debump" in options:
        myRoutines.calculateChiangles()
        myRoutines.debumpProtein(optflag)  

    myRoutines.optimizeHydrogens(optflag)

    # Put any remaining HSNs back to HIS for parameterization

    myRoutines.renameHistidines("HSN","HIS")
    myRoutines.renameHistidines("HS2N","HIS")
        
    myForcefield = Forcefield(ff)
    hitlist, misslist = myRoutines.applyForcefield(myForcefield)
    reslist, charge = myProtein.getCharge()

    header = printHeader(misslist, reslist, charge, ff, myRoutines.getWarnings(), ph)
        
    lines = myProtein.printAtoms(hitlist)

    if "hbond" in options:
        myRoutines.printHbond()

    if verbose:
        print "Total time taken: %.2f seconds\n" % (time.time() - start)
    return header, lines

def mainCommand():
    """
        Main driver for running program from the command line.
    """
    shortOptlist = "h,v"
    longOptlist = ["help","verbose","ff=","nodebump","noopt","hbond", "assign-only","with-ph=","apbs-input"]

    try: opts, args = getopt.getopt(sys.argv[1:], shortOptlist, longOptlist)
    except getopt.GetoptError, details:
        sys.stderr.write("GetoptError:  %s\n" % details)
        usage(2)

    if len(args) != 2:
        sys.stderr.write("Incorrect number (%d) of arguments!\n" % len(args))
        usage(2)

    options = {"debump":1,"opt":1}
 
    outpath = None
    ff = None
    for o,a in opts:
        if o in ("-v","--verbose"):
            options["verbose"] = 1
        elif o in ("-h","--help"):
            usage(2)
            sys.exit()
        elif o == "--nodebump":  del options["debump"]
        elif o == "--noopt":    del options["opt"]
        elif o == "--hbond":     options["hbond"] = 1
        elif o == "--apbs-input": options["input"] = 1
        elif o == "--with-ph":
            try:
                ph = float(a)
                options["ph"] = ph
                if ph < 0.0 or ph > 14.0: raise ValueError
            except ValueError:
                text = "%s is not a valid pH!  " % a
                text += "Please choose a pH between 0.0 and 14.0."
                raise ValueError, text
        elif o == "--assign-only":
            del options["debump"]
            del options["opt"]
        elif o == "--ff":
            if a in ["amber","AMBER","charmm","CHARMM","parse","PARSE"]:
                ff = string.lower(a)
            else:
                raise ValueError, "Invalid forcefield %s!" % a

    if ff == None:
        raise ValueError, "Forcefield not specified!"

    text =  "\n--------------------------\n"
    text += "PDB2PQR - a Python-based structural conversion utility\n"
    text += "--------------------------\n"
    text += "Please cite your use of PDB2PQR as:\n"
    text += "  Dolinsky TJ, Nielsen JE, McCammon JA, Baker NA.\n"
    text += "  PDB2PQR: an automated pipeline for the setup, execution,\n"
    text += "  and analysis of Poisson-Boltzmann electrostatics calculations.\n"
    text += "  Nucleic Acids Research 32 W665-W667 (2004).\n\n"
    sys.stderr.write(text)
            
    path = args[0]
    file = getFile(path)
    pdblist, errlist = readPDB(file)
    
    if len(pdblist) == 0 and len(errlist) == 0:
        print "Unable to find file %s!\n" % path
        os.remove(path)
        sys.exit(2)

    if len(errlist) != 0 and "verbose" in options:
        print "Warning: %s is a non-standard PDB file.\n" % path
        print errlist

    outpath = args[1]
    options["outname"] = outpath

    header, lines = runPDB2PQR(pdblist, ff, options)

    # Print the PQR file
    outfile = open(outpath,"w")
    outfile.write(header)
    for line in lines:
        outfile.write(line)
    outfile.close()

    if "input" in options:
        from src import inputgen
        from src import psize
        method = "mg-auto"
        size = psize.Psize()
        size.parseInput(outpath)
        async = 0 # No async files here!
        igen = inputgen.inputGen(outpath, size, method, async)
        igen.printInput()
   
def mainCGI():
    """
        Main driver for running PDB2PQR from a web page
    """
    import cgi
    import cgitb

    cgitb.enable()
    form = cgi.FieldStorage()

    options = {}
 
    ff = form["FF"].value 
    input = 0
  
    if form.has_key("DEBUMP"): options["debump"] = 1
    if form.has_key("OPT"): options["opt"] = 1
    if form.has_key("PROPKA"):
        try:
            ph = float(form["PH"].value)
            if ph < 0.0 or ph > 14.0: raise ValueError
            options["ph"] = ph
        except ValueError:
             text = "The entered pH of %.2f is invalid!  " % form["PH"].value
             text += "Please choose a pH between 0.0 and 14.0."
             print "Content-type: text/html\n"
             print text
             sys.exit(2)
    if form.has_key("PDBID"):
        file = getFile(form["PDBID"].value)
    elif form.has_key("PDB"):
        file = StringIO(form["PDB"].value)
    if form.has_key("INPUT"):
        input = 1
        
    pdblist, errlist = readPDB(file)    
    if len(pdblist) == 0 and len(errlist) == 0:
        text = "Unable to find PDB file - Please make sure this is "
        text += "a valid PDB file ID!"
        print "Content-type: text/html\n"
        print text
        sys.exit(2)
    elif len(pdblist) > 10000 and "opt" in options:
        text = "<HTML><HEAD>"
        text += "<TITLE>PDB2PQR Error</title>"
        text += "<link rel=\"stylesheet\" href=\"%s\" type=\"text/css\">" % STYLESHEET
        text += "</HEAD><BODY><H2>PDB2PQR Error</H2><P>"
        text += "Due to server limits, we are currently unable to optimize "
        text += "proteins of greater than 10000 atoms on the server.  If you "
        text += "want to forgo optimization please try the server again.<P>"
        text += "Otherwise you may use the standalone version of PDB2PQR that "
        text += "is available from the <a href=\"http://pdb2pqr.sourceforge.net\">"
        text += "PDB2PQR SourceForge project page</a>."
        text += "</BODY></HTML>"
        print "Content-type: text/html\n"
        print text
        sys.exit(2)
        
    try:
        starttime = time.time()
        name = setID(starttime)
 
        pqrpath = startServer(name)
        options["outname"] = pqrpath
        header, lines = runPDB2PQR(pdblist, ff, options)
        file = open(pqrpath, "w")
        file.write(header)
        for line in lines:
            file.write("%s\n" % string.strip(line))
        file.close()
                
        if input:
            from src import inputgen
            from src import psize
            method = "mg-auto"
            size = psize.Psize()
            size.parseInput(pqrpath)
            async = 0 # No async files here!
            igen = inputgen.inputGen(pqrpath, size, method, async)
            igen.printInput()
                    
        endtime = time.time() - starttime
        createResults(header, input, name, endtime)
        logRun(form, endtime, len(pdblist))

    except StandardError, details:
        print "Content-type: text/html\n"
        print details
        createError(name, details)
    
if __name__ == "__main__":
    """ Determine if called from command line or CGI """
    
    if not os.environ.has_key("REQUEST_METHOD"):
        mainCommand()    
    else:
        mainCGI()
