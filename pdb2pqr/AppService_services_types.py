################################################## 
# ./AppService_services_types.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import ZSI
from ZSI.TCcompound import Struct

############################## 
# targetNamespace 
#
# http://nbcr.sdsc.edu/opal/types 
##############################


# imported as: ns1
class nbcr_sdsc_edu_opal_types:
    targetNamespace = 'http://nbcr.sdsc.edu/opal/types'

    class InputFileType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'InputFileType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._name = None
            self._contents = None

            TClist = [ZSI.TC.String(pname="name",aname="_name"), ZSI.TC.Base64String(pname="contents",aname="_contents"), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_name(self):
            return self._name

        def Set_name(self,_name):
            self._name = _name

        def Get_contents(self):
            return self._contents

        def Set_contents(self,_contents):
            self._contents = _contents


    class FaultType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'FaultType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._message = None

            TClist = [ZSI.TC.String(pname="message",aname="_message", optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_message(self):
            return self._message

        def Set_message(self,_message):
            self._message = _message


    class FlagsType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'FlagsType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._id = None
            self._tag = None
            self._textDesc = None

            TClist = [ZSI.TC.String(pname="id",aname="_id"), ZSI.TC.String(pname="tag",aname="_tag"), ZSI.TC.String(pname="textDesc",aname="_textDesc", optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_id(self):
            return self._id

        def Set_id(self,_id):
            self._id = _id

        def Get_tag(self):
            return self._tag

        def Set_tag(self,_tag):
            self._tag = _tag

        def Get_textDesc(self):
            return self._textDesc

        def Set_textDesc(self,_textDesc):
            self._textDesc = _textDesc


    class ImplicitParamsType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'ImplicitParamsType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._id = None
            self._name = None
            self._extension = None
            self._ioType = None
            self._required = None
            self._semanticType = None
            self._textDesc = None
            self._min = None
            self._max = None

            TClist = [ZSI.TC.String(pname="id",aname="_id"), ZSI.TC.String(pname="name",aname="_name", optional=1), ZSI.TC.String(pname="extension",aname="_extension", optional=1), ns1.IOType_Def(name="ioType",ns=ns), ZSI.TC.Boolean(pname="required",aname="_required", optional=1), ZSI.TC.String(pname="semanticType",aname="_semanticType", optional=1), ZSI.TC.String(pname="textDesc",aname="_textDesc", optional=1), ZSI.TCnumbers.Iint(pname="min",aname="_min", optional=1), ZSI.TCnumbers.Iint(pname="max",aname="_max", optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_id(self):
            return self._id

        def Set_id(self,_id):
            self._id = _id

        def Get_name(self):
            return self._name

        def Set_name(self,_name):
            self._name = _name

        def Get_extension(self):
            return self._extension

        def Set_extension(self,_extension):
            self._extension = _extension

        def Get_ioType(self):
            return self._ioType

        def Set_ioType(self,_ioType):
            self._ioType = _ioType

        def Get_required(self):
            return self._required

        def Set_required(self,_required):
            self._required = _required

        def Get_semanticType(self):
            return self._semanticType

        def Set_semanticType(self,_semanticType):
            self._semanticType = _semanticType

        def Get_textDesc(self):
            return self._textDesc

        def Set_textDesc(self,_textDesc):
            self._textDesc = _textDesc

        def Get_min(self):
            return self._min

        def Set_min(self,_min):
            self._min = _min

        def Get_max(self):
            return self._max

        def Set_max(self,_max):
            self._max = _max


    class ParamsType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'ParamsType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._id = None
            self._tag = None
            self._paramType = None
            self._ioType = None
            self._required = None
            self._value = None
            self._semanticType = None
            self._textDesc = None

            TClist = [ZSI.TC.String(pname="id",aname="_id"), ZSI.TC.String(pname="tag",aname="_tag", optional=1), ns1.ParamType_Def(name="paramType",ns=ns), ns1.IOType_Def(name="ioType",ns=ns, optional=1), ZSI.TC.Boolean(pname="required",aname="_required", optional=1), ZSI.TC.String(pname="value",aname="_value", repeatable=1, optional=1), ZSI.TC.String(pname="semanticType",aname="_semanticType", optional=1), ZSI.TC.String(pname="textDesc",aname="_textDesc", optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_id(self):
            return self._id

        def Set_id(self,_id):
            self._id = _id

        def Get_tag(self):
            return self._tag

        def Set_tag(self,_tag):
            self._tag = _tag

        def Get_paramType(self):
            return self._paramType

        def Set_paramType(self,_paramType):
            self._paramType = _paramType

        def Get_ioType(self):
            return self._ioType

        def Set_ioType(self,_ioType):
            self._ioType = _ioType

        def Get_required(self):
            return self._required

        def Set_required(self,_required):
            self._required = _required

        def Get_value(self):
            return self._value

        def Set_value(self,_value):
            self._value = _value

        def Get_semanticType(self):
            return self._semanticType

        def Set_semanticType(self,_semanticType):
            self._semanticType = _semanticType

        def Get_textDesc(self):
            return self._textDesc

        def Set_textDesc(self,_textDesc):
            self._textDesc = _textDesc


    class OutputFileType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'OutputFileType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._name = None
            self._url = None

            TClist = [ZSI.TC.String(pname="name",aname="_name"), ZSI.TC.URI(pname="url",aname="_url"), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_name(self):
            return self._name

        def Set_name(self,_name):
            self._name = _name

        def Get_url(self):
            return self._url

        def Set_url(self,_url):
            self._url = _url


    class AppMetadataInputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'AppMetadataInputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars

            TClist = []

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)

    class StatusOutputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'StatusOutputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._code = None
            self._message = None
            self._baseURL = None

            TClist = [ZSI.TCnumbers.Iint(pname="code",aname="_code"), ZSI.TC.String(pname="message",aname="_message"), ZSI.TC.URI(pname="baseURL",aname="_baseURL"), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_code(self):
            return self._code

        def Set_code(self,_code):
            self._code = _code

        def Get_message(self):
            return self._message

        def Set_message(self,_message):
            self._message = _message

        def Get_baseURL(self):
            return self._baseURL

        def Set_baseURL(self,_baseURL):
            self._baseURL = _baseURL


    class AppConfigInputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'AppConfigInputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars

            TClist = []

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)

    class OutputsByNameInputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'OutputsByNameInputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._jobID = None
            self._fileName = None

            TClist = [ZSI.TC.String(pname="jobID",aname="_jobID"), ZSI.TC.String(pname="fileName",aname="_fileName"), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_jobID(self):
            return self._jobID

        def Set_jobID(self,_jobID):
            self._jobID = _jobID

        def Get_fileName(self):
            return self._fileName

        def Set_fileName(self,_fileName):
            self._fileName = _fileName


    class getOutputAsBase64ByNameOutput_Dec(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/literals'
        literal = 'getOutputAsBase64ByNameOutput'

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            # internal vars
            self._item = None

            TClist = [ZSI.TCnumbers.Ibyte(pname="item",aname="_item", repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_item(self):
            return self._item

        def Set_item(self,_item):
            self._item = _item


    class JobInputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'JobInputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._argList = None
            self._numProcs = None
            self._inputFile = None

            TClist = [ZSI.TC.String(pname="argList",aname="_argList", optional=1), ZSI.TCnumbers.Iint(pname="numProcs",aname="_numProcs", optional=1), ns1.InputFileType_Def(name="inputFile", ns=ns, repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_argList(self):
            return self._argList

        def Set_argList(self,_argList):
            self._argList = _argList

        def Get_numProcs(self):
            return self._numProcs

        def Set_numProcs(self,_numProcs):
            self._numProcs = _numProcs

        def Get_inputFile(self):
            return self._inputFile

        def Set_inputFile(self,_inputFile):
            self._inputFile = _inputFile


    class opalFaultOutput_Dec(FaultType_Def):
        literal = "opalFaultOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.FaultType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.FaultType_Def(name=name, ns=ns, **kw)

    class FlagsArrayType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'FlagsArrayType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._flag = None

            TClist = [ns1.FlagsType_Def(name="flag", ns=ns, repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_flag(self):
            return self._flag

        def Set_flag(self,_flag):
            self._flag = _flag


    class ImplicitParamsArrayType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'ImplicitParamsArrayType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._param = None

            TClist = [ns1.ImplicitParamsType_Def(name="param", ns=ns, repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_param(self):
            return self._param

        def Set_param(self,_param):
            self._param = _param


    class ParamsArrayType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'ParamsArrayType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._separator = None
            self._param = None

            TClist = [ZSI.TC.String(pname="separator",aname="_separator", optional=1), ns1.ParamsType_Def(name="param", ns=ns, repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_separator(self):
            return self._separator

        def Set_separator(self,_separator):
            self._separator = _separator

        def Get_param(self):
            return self._param

        def Set_param(self,_param):
            self._param = _param


    class JobOutputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'JobOutputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._stdOut = None
            self._stdErr = None
            self._outputFile = None

            TClist = [ZSI.TC.URI(pname="stdOut",aname="_stdOut", optional=1), ZSI.TC.URI(pname="stdErr",aname="_stdErr", optional=1), ns1.OutputFileType_Def(name="outputFile", ns=ns, repeatable=1, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_stdOut(self):
            return self._stdOut

        def Set_stdOut(self,_stdOut):
            self._stdOut = _stdOut

        def Get_stdErr(self):
            return self._stdErr

        def Set_stdErr(self,_stdErr):
            self._stdErr = _stdErr

        def Get_outputFile(self):
            return self._outputFile

        def Set_outputFile(self,_outputFile):
            self._outputFile = _outputFile


    class getAppMetadataInput_Dec(AppMetadataInputType_Def):
        literal = "getAppMetadataInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.AppMetadataInputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.AppMetadataInputType_Def(name=name, ns=ns, **kw)

    class JobSubOutputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'JobSubOutputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._jobID = None
            self._status = None

            TClist = [ZSI.TC.String(pname="jobID",aname="_jobID"), ns1.StatusOutputType_Def(name="status", ns=ns), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_jobID(self):
            return self._jobID

        def Set_jobID(self,_jobID):
            self._jobID = _jobID

        def Get_status(self):
            return self._status

        def Set_status(self,_status):
            self._status = _status


    class queryStatusOutput_Dec(StatusOutputType_Def):
        literal = "queryStatusOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.StatusOutputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.StatusOutputType_Def(name=name, ns=ns, **kw)

    class destroyOutput_Dec(StatusOutputType_Def):
        literal = "destroyOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.StatusOutputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.StatusOutputType_Def(name=name, ns=ns, **kw)

    class getAppConfigInput_Dec(AppConfigInputType_Def):
        literal = "getAppConfigInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.AppConfigInputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.AppConfigInputType_Def(name=name, ns=ns, **kw)

    class getOutputAsBase64ByNameInput_Dec(OutputsByNameInputType_Def):
        literal = "getOutputAsBase64ByNameInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.OutputsByNameInputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.OutputsByNameInputType_Def(name=name, ns=ns, **kw)

    class launchJobInput_Dec(JobInputType_Def):
        literal = "launchJobInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.JobInputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.JobInputType_Def(name=name, ns=ns, **kw)

    class launchJobBlockingInput_Dec(JobInputType_Def):
        literal = "launchJobBlockingInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.JobInputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.JobInputType_Def(name=name, ns=ns, **kw)

    class ArgumentsType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'ArgumentsType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._flags = None
            self._taggedParams = None
            self._untaggedParams = None
            self._implicitParams = None

            TClist = [ns1.FlagsArrayType_Def(name="flags", ns=ns, optional=1), ns1.ParamsArrayType_Def(name="taggedParams", ns=ns, optional=1), ns1.ParamsArrayType_Def(name="untaggedParams", ns=ns, optional=1), ns1.ImplicitParamsArrayType_Def(name="implicitParams", ns=ns, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_flags(self):
            return self._flags

        def Set_flags(self,_flags):
            self._flags = _flags

        def Get_taggedParams(self):
            return self._taggedParams

        def Set_taggedParams(self,_taggedParams):
            self._taggedParams = _taggedParams

        def Get_untaggedParams(self):
            return self._untaggedParams

        def Set_untaggedParams(self,_untaggedParams):
            self._untaggedParams = _untaggedParams

        def Get_implicitParams(self):
            return self._implicitParams

        def Set_implicitParams(self,_implicitParams):
            self._implicitParams = _implicitParams


    class BlockingOutputType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'BlockingOutputType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._status = None
            self._jobOut = None

            TClist = [ns1.StatusOutputType_Def(name="status", ns=ns), ns1.JobOutputType_Def(name="jobOut", ns=ns), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_status(self):
            return self._status

        def Set_status(self,_status):
            self._status = _status

        def Get_jobOut(self):
            return self._jobOut

        def Set_jobOut(self,_jobOut):
            self._jobOut = _jobOut


    class getOutputsOutput_Dec(JobOutputType_Def):
        literal = "getOutputsOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.JobOutputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.JobOutputType_Def(name=name, ns=ns, **kw)

    class launchJobOutput_Dec(JobSubOutputType_Def):
        literal = "launchJobOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.JobSubOutputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.JobSubOutputType_Def(name=name, ns=ns, **kw)

    class AppMetadataType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'AppMetadataType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._usage = None
            self._info = None
            self._types = None

            TClist = [ZSI.TC.String(pname="usage",aname="_usage"), ZSI.TC.String(pname="info",aname="_info", repeatable=1, optional=1), ns1.ArgumentsType_Def(name="types", ns=ns, optional=1), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           hasextras=1, **kw)
        def Get_usage(self):
            return self._usage

        def Set_usage(self,_usage):
            self._usage = _usage

        def Get_info(self):
            return self._info

        def Set_info(self,_info):
            self._info = _info

        def Get_types(self):
            return self._types

        def Set_types(self,_types):
            self._types = _types


    class launchJobBlockingOutput_Dec(BlockingOutputType_Def):
        literal = "launchJobBlockingOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.BlockingOutputType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.BlockingOutputType_Def(name=name, ns=ns, **kw)

    class AppConfigType_Def(ZSI.TCcompound.Struct):
        schema = 'http://nbcr.sdsc.edu/opal/types'
        type = 'AppConfigType'

        def __init__(self, name=None, ns=None, **kw):
            # internal vars
            self._metadata = None
            self._binaryLocation = None
            self._defaultArgs = None
            self._parallel = None

            TClist = [ns1.AppMetadataType_Def(name="metadata", ns=ns), ZSI.TC.String(pname="binaryLocation",aname="_binaryLocation"), ZSI.TC.String(pname="defaultArgs",aname="_defaultArgs", optional=1), ZSI.TC.Boolean(pname="parallel",aname="_parallel"), ]

            oname = name

            if name:
                aname = '_%s' % name
                if ns:
                    oname += ' xmlns="%s"' % ns
                else:
                    oname += ' xmlns="%s"' % self.__class__.schema
            else:
                aname = None

            ZSI.TCcompound.Struct.__init__(self, self.__class__, TClist,
                                           pname=name, inorder=0,
                                           aname=aname, oname=oname,
                                           **kw)
        def Get_metadata(self):
            return self._metadata

        def Set_metadata(self,_metadata):
            self._metadata = _metadata

        def Get_binaryLocation(self):
            return self._binaryLocation

        def Set_binaryLocation(self,_binaryLocation):
            self._binaryLocation = _binaryLocation

        def Get_defaultArgs(self):
            return self._defaultArgs

        def Set_defaultArgs(self,_defaultArgs):
            self._defaultArgs = _defaultArgs

        def Get_parallel(self):
            return self._parallel

        def Set_parallel(self,_parallel):
            self._parallel = _parallel


    class getAppMetadataOutput_Dec(AppMetadataType_Def):
        literal = "getAppMetadataOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.AppMetadataType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.AppMetadataType_Def(name=name, ns=ns, **kw)

    class getAppConfigOutput_Dec(AppConfigType_Def):
        literal = "getAppConfigOutput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema

            ns1.AppConfigType_Def.__init__(self, name=name, ns=ns, **kw)
            self.typecode = ns1.AppConfigType_Def(name=name, ns=ns, **kw)

    class IOType_Def(ZSI.TC.String):
        tag = "tns:IOType"
        def __init__(self, name=None, ns=None, **kw):
            aname = None
            if name:
                kw["pname"] = name
                kw["aname"] = "_%s" % name
                kw["oname"] = '%s xmlns:tns="%s"' %(name,ns1.targetNamespace)
            ZSI.TC.String.__init__(self, **kw)

    class ParamType_Def(ZSI.TC.String):
        tag = "tns:ParamType"
        def __init__(self, name=None, ns=None, **kw):
            aname = None
            if name:
                kw["pname"] = name
                kw["aname"] = "_%s" % name
                kw["oname"] = '%s xmlns:tns="%s"' %(name,ns1.targetNamespace)
            ZSI.TC.String.__init__(self, **kw)

    class destroyInput_Dec(ZSI.TC.String):
        literal = "destroyInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema
            kw["oname"] = '%s xmlns="%s"' %(name, ns)

            ZSI.TC.String.__init__(self,pname=name, aname="%s" % name,  **kw)

    class queryStatusInput_Dec(ZSI.TC.String):
        literal = "queryStatusInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema
            kw["oname"] = '%s xmlns="%s"' %(name, ns)

            ZSI.TC.String.__init__(self,pname=name, aname="%s" % name,  **kw)

    class getOutputsInput_Dec(ZSI.TC.String):
        literal = "getOutputsInput"
        schema = "http://nbcr.sdsc.edu/opal/types"

        def __init__(self, name=None, ns=None, **kw):
            name = name or self.__class__.literal
            ns = ns or self.__class__.schema
            kw["oname"] = '%s xmlns="%s"' %(name, ns)

            ZSI.TC.String.__init__(self,pname=name, aname="%s" % name,  **kw)

# define class alias for subsequent ns classes
ns1 = nbcr_sdsc_edu_opal_types



