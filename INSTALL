APBS -- Adaptive Poisson-Boltzmann Solver

  Nathan A. Baker (nbaker@wasabi.ucsd.edu)
  Dept. of Chemistry and Biochemistry
  Dept. of Mathematics, Scientific Computing Group
  University of California, San Diego 

  Additional contributing authors listed in the code documentation.

Copyright © 1999. The Regents of the University of California (Regents).
All Rights Reserved. 

Permission to use, copy, modify, and distribute this software and its
documentation for educational, research, and not-for-profit purposes,
without fee and without a signed licensing agreement, is hereby granted,
provided that the above copyright notice, this paragraph and the
following two paragraphs appear in all copies, modifications, and
distributions.

IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
REGENTS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  

REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE.  THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF
ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS".  REGENTS HAS NO OBLIGATION
TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS. 
------------------------------------------------------------------------

==============================
Unpacking the gzipped tar file
==============================

APBS is distributed as a gzipped tar file, "apbs.tgz".  The following command
will unpack APBS into a number of files and subdirectories on any UNIX 
machine (and on any WinNT machine with the GNU-Win32 tools gzip and tar).

    gzip -dc apbs.tgz | tar xvf -

======================================================================
Building the package using the GNU "configure" shell script and "make"
======================================================================

The "configure" shell script in the APBS_ROOT directory (the toplevel directory
created when you unpacked the APBS tgz file) will build the entire package.
This is a standard GNU autoconf-generated configuration script.
You should be able to simply type:

    ./configure
    make
    make install

If you ever need to rebuild the configure script or Makefile.in files that 
configure uses, the procedure is rougly as follows.  You first run aclocal to 
generate some m4 macros in the file aclocal.m4 which automake needs to use.
You then run autoconf to generate the master configure script in the root 
directory, from the input file configure.in.  You then run autoheader to
generate a config.h.in file from configure.in that will be used by configure
to generate a config.h file for the package.  You then finally run automake to
generate a Makefile.in file from each Makefile.am in various subdirectories 
specified in configure.in.  The script configure then generates the header
config.h from config.h.in as well as the final Makefile in each directory from
the Makefile.in files previously generated by automake.  I.e., you would do:

    rm -f config.cache
    aclocal
    autoconf
    autoheader
    automake

You would then configure and build as before:

    ./configure
    make
    make install

======================================================================
Notes for installation on various platforms
======================================================================
----------------------------------
Intel ix86 processor family with GCC 2.95.1 compiler
----------------------------------
Set the CC variable before ./configure depending on what you want to do:

  Figure out why the code isn't working:
  % setenv CC "gcc -Wall -g -O"

  Do production runs
  % setenv CC "gcc -O3 -ffast-math -m486 -funroll-loops"

Check to make sure the HAVE_MPI_H flag has been set in inc/config.h before
compiling.

----------------------------------
The Power3 IBM Blue Horizon system
----------------------------------
Set the CC variable before ./configure:

% setenv CC "mpcc -bmaxdata:0x???????? -bmaxstack:0x10000000 \
                  -L/usr/local/apps/mass -lmass -O3 -qstrict \
                  -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto"

Note that the actual command line declaration should contain no line breaks
and continuations; these seem to screw up sed (used by configure) under
AIX.  The bmaxdata linker flag controls the amount of heap the program is
allocated to allocate.  It is a hexadecimal number representing the number
of bytes available.  The NPACI documentation suggests 0x80000000, which
gives 2048 MB of heap space.  While the Blue Horizon nodes do have 8 GB of
memory available per 8-processor node, much of this is taken up by the OS.
In practice, for 8 tasks per node, about 400 MB of heap space is available
to each task (this means OS-related tasks take up nearly 5 GB of memory!) .
In any case, -bmaxdata:0x18000000 seems to be a safe choice as it provides
384 MB heap space per task.

Check to make sure the HAVE_MPI_H flag has been set in inc/config.h before
compiling; configure seems to mess up the detection of the headers when
building config.h.  

Finally, a single electrostatics calculation via APBS requires so little
communication, that it makes since to use the IP-based MPI implementation
and thereby allow 8 tasks (processes) per node.  Check the NPACI
documentation for more information on this.
