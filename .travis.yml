---
language: python

python:
  - 3.6
#  - 3.7

matrix:
  include:
    - name: "Generic Python 3.6 on macOS"
      os: osx
      osx_image: xcode11.4
      language: shell
      before_install:
        - python3 --version
        - pip3 install -U pip
        - pip3 install -U pytest
        - pip3 install -U numpy
        - pip3 install -U virtualenv
      addons:
        homebrew:
          packages:
            - gcc@7
            - bison
            - flex
            - swig
            - readline
          update: true
#    - name: "Generic Python 3.X on Linux"
#      os: linux
#      dist: xenial
#      addons:
#        apt:
#          packages:
#            - g++-7
#            - bison
#            - flex
#            - swig
#            - libreadline-dev

# compiler:
#    - gcc
#    - clang

env:
  global:
    - TEST_LIST='born geoflow actin-dimer-auto actin-dimer-parallel alkanes FKBP hca-bind ion-pmf ion-protein ionize pka-lig point-pmf solv protein-rna'
    # From https://codecov.io/gh/Electrostatics/apbs-pdb2pqr
    - CODECOV_TOKEN="e3a1e24c-5598-4f47-9353-7fa0ac57f98e"
  matrix:
    - CMAKE_OPTS=' -DENABLE_GEOFLOW=ON  -DENABLE_BEM=ON  -DGET_MSMS=ON  -DENABLE_FETK=ON  -DENABLE_PBSAM=OFF -DENABLE_PBAM=OFF -DENABLE_PYTHON=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_FLAGS="-fPIC"'
#    - CMAKE_OPTS=' -DENABLE_GEOFLOW=ON  -DENABLE_BEM=ON  -DGET_MSMS=ON  -DENABLE_FETK=ON  -DENABLE_PBSAM=OFF -DENABLE_PBAM=OFF -DENABLE_PYTHON=ON  -DBUILD_SHARED_LIBS=ON  -DCMAKE_C_FLAGS="-fPIC" -DBUILD_DOC=ON'
#    - CMAKE_OPTS=' -DENABLE_GEOFLOW=ON  -DENABLE_BEM=OFF -DGET_MSMS=OFF -DENABLE_FETK=ON  -DENABLE_PBSAM=OFF -DENABLE_PBAM=OFF -DENABLE_PYTHON=ON  -DBUILD_SHARED_LIBS=ON  -DCMAKE_C_FLAGS="-fPIC" -DBUILD_DOC=ON'

branches:
  only:
    - master

before_install:
  - python3 --version
  - pip3 install -U pip
  - pip3 install -U pytest
  - pip3 install -U numpy
  - pip3 install -U virtualenv
  - pip3 install -r pdb2pqr/requirements.txt

before_script:
  - |
      echo "==================================== WHERE AM I ==================================== "
      pwd
      # Make the install directory
      mkdir -p $HOME/local

      echo "==================================== VERSIONS: ==================================== "
      echo "==================================== PYTHON VERSION"
      python -c "import sys; print(sys.version)"
      echo "==================================== CMAKE VERSION"
      cmake --version
      echo "==================================== Gcc VERSION"
      gcc --version
      echo "==================================== G++ VERSION"
      g++ --version
      echo "==================================== SWIG VERSION"
      swig -version

      echo "==================================== Install Python requirements ==================================== "
      pip3 install -U pip
      pip3 install -U pytest
      pip3 install -U virtualenv
      pip3 install -U numpy
      pip3 install -r pdb2pqr/requirements.txt

      #  Just build APBS for now
      echo "==================================== PWD FOR TOP DIR ==================================== "
      pwd

      echo "==================================== Get External SubModules ==================================== "
      git submodule init
      git submodule update
      #mkdir build
      #cd build
      #cmake ..
      #make VERBOSE=1
      #cd ..

      cd apbs
      echo "==================================== PWD FOR APBS SRC ==================================== "
      pwd
      mkdir build
      cd build
      echo "==================================== BUILD DIR ==================================== "
      pwd

      echo "==================================== RUN CMAKE ==================================== "
      pwd
      cmake $CMAKE_OPTS -DCMAKE_INSTALL_PREFIX:PATH=$HOME/local .. || exit 1

      echo "==================================== RUN MAKE ==================================== "
      pwd
      VERBOSE=1 make -j 1 install

script:
  - |
      #  Assume we are in the User's home directory where the top of the repository
      echo "==================================== LOOK for APBS binary ==================================== "
      pwd
      echo find $HOME -type f -name apbs
      find $HOME -type f -name apbs
      echo find $HOME -type f -name libmaloc
      find $HOME -type f -name libmaloc\*
      echo cd ../tests
      cd ../tests
      echo pwd
      pwd
      echo ls
      ls
      if [ -f /etc/os-release ]; then
        ldd $HOME/local/bin/apbs
      fi
      #  TODO: Total HACK since it should be using STATIC libraries
      export LD_LIBRARY_PATH="/home/travis/build/Electrostatics/apbs-pdb2pqr/apbs/build/fetk/lib"
      for name in `echo $TEST_LIST`
      do
        echo bash run_travis_test.sh $HOME/local/bin $name
        bash run_travis_test.sh $HOME/local/bin $name
      done

notifications:
  slack: electrostatics:U4cSeRAFGXl9vUqdg4WOubnc
